===================================================================================================================
				:::Scripting Basics:::
			https://tldp.org/LDP/abs/html/index.html
			
===================================================================================================================
$ bash -x script-name.sh --> to debug the script
$ set -x --> inside the script is used to debug the script
--------------------------------------------------------------------------------------------------------------------
echo:
--------------------------------------------------------------------------------------------------------------------
to print data on the stdout, string or numberic data

exmple:
-------------------
#!/bin/bash
echo "my age is 32"
echo 'my name is raj'
echo 

--------------------------------------------------------------------------------------------------------------------
quotes:
--------------------------------------------------------------------------------------------------------------------
we will be using differnt quotes in shell scripting like "", '', ``. each quote has its own perpose. so while using this we should be careful.
"" --> will read the values of variables defined in the script and print the output of that variable
'' --> will consider data between '' as a string so, it will not print the values of variable.
`` --> is to execute a command we use this `` quotes. it will consider as a single command.
$() --> will execute the command inside the () braces. same as ``. 
---------------------------
quotes.sh
---------------------------
#!/bin/bash
NAME="rajesh"
YEAR=2022
echo "$NAME" 
echo '$YEAR'
echo `date`
----------------------------

--------------------------------------------------------------------------------------------------------------------
Variable:
--------------------------------------------------------------------------------------------------------------------
variables defined in the shell script are case sensitive, and it will only allow "_" while define the variable.

1. case sensitive 
2. only "_" is allowed, "-" not allowed 
	exmple: 
	----------
	MISSION_NAME != mission_name	--> case sensitive
	"mission_name"	-->  is correct
	"mission-name" 	--> is incorrect

3. no space while defining the variable
	exmple:
	-----------
	A=10 --> correct
	B=20 --> correct
	Name="raj" --> correct 

	Name = "kumar" --> incorrect
	A = 10 --> incorrect
	B = 20 --> incorrect

--------------------------------------------------------------------------------------------------------------------
read
--------------------------------------------------------------------------------------------------------------------
to pass any user inputs to the script we need to use the keyword "read"

echo --> is to print data 
read --> is to input to a variable. 

example:
----------
#!/bin/bash
read -p " please enter your name: " NAME
echo $NAME

read.sh
-------------------------------------------
#!/bin/bash

read -p " provide name: " NAME
read -p " provide age: " AGE

echo $NAME
echo $AGE

--------------------------------------------------------------------------------------------------------------------
Special Varibales:
--------------------------------------------------------------------------------------------------------------------
below are the special variables used to store the values. each variable is defined to store the specific value. 

$* --> to store the arguments passed to the script ($1, $2, $3,...)
$@ --> to store the arguments passed to the script ($1, $2, $3,...)

$# --> to store the argument count passed the script
Note: if you specify " * " as script argument, that means it will take the file in that directory as arguments.

$? --> to store the exit-code/value of last command exicuted
$$ --> to store the PID value of that script
$! --> to store the PID value of the last background job


$0 --> to store script name
$1 --> to store first argument as an input
$2 --> to store second  argument
$3 --> to store third argument

$- --> command which is being executed previously.


----------------------------
Special-variable.sh
----------------------------
#!/bin/bash
# this is to check how the special variables are used 

echo "Value stored in special variable"'$*': $*
echo "Value stored in special variable"'$#': $#
echo "Value stored in special variable"'$?': $?
echo "Value stored in special variable"'$0': $0
echo "Value stored in special variable"'$1': $1
echo "Value stored in special variable"'$2': $2
echo "Value stored in special variable"'$$': $$
echo "Value stored in special variable"'$!': $!
echo "Value stored in special variable"'$@': $@
---------------------------	
eample: test.sh
----------------
if [ "$#" -eq 0 ] ; 
then
	echo -e "No argument."
	echo -e "Write a number between 1 and 12."
	exit 1		# Job failed and exited from script.
fi

--------------------------------------------------------------------------------------------------------------------
Arithmetic:
--------------------------------------------------------------------------------------------------------------------
1. for arthemetic operation we user "expr" command. 
2. we must use space between each variable +, -, *, /,^
3. we can use $(expr --) or $((--))

example:
--------------------
A=10
B=20 
echo `expr $A + $B`
echo $(expr $B - $A)
echo $(expr $A \* $B)
echo `expr $A / $B`
---------------------
3. if we write arthemetic operators between "((  ))" we can write freely
example:
-----------------
A=10
B=20
echo $((A+B)) | echo $((A - B))| echo $(( A * B))
-----------------------
4. for float caliculation need to use package tool "bc"
exmple:
--------------
echo $((22/7)) --> o/p: 3 
echo 22/7 |bc -l --> o/p: 3.14285714285714285714

--------------------------------------------------------------------------------------------------------------------
Conditional Logic:
--------------------------------------------------------------------------------------------------------------------
Conditional operators:
----------------------------------------
1. conditons are written in [ ] or [[ ]] 
2. list of operators 
String: string operator used for checking [ =, != ]

example:
---------
	[ "abc" = "abc" ] 
	[ "abc" != "abc" ]
	
--------------------------------------------------------------------------------------------------------------------
Relational Operators:
--------------------------------------------------------------------------------------------------------------------
numbers: operator used to check condition [ -eq, -ne, -gt, -lt, -le, -ge]

example:
-----------
[ 5 -eq 5 ]
[ 5 -ne 5 ]
[ 6 -gt 5 ]
[ 5 -lt 6 ]

String Comparisons
+------------------+-----------------------------------------------+
|   Conditions     |                    Description                |
+------------------+-----------------------------------------------+
| Str1 = Str2      | True if the strings are equal                 |                            
| Str1 != Str2     | True if the strings are not equal             |
| -n Str1          | True if the string is not null                | 
| -z Str1          | True if the string is null                    |                             
+------------------+-----------------------------------------------+
Numeric Comparisons
+------------------+-----------------------------------------------+
|   Conditions     |                    Description                |
+------------------+-----------------------------------------------+
| expr1 -eq expr2  | True if the expressions are equal             |
| expr1 -ne expr2  | True if the expressions are not equal         |
| expr1 -gt expr2  | True if expr1 is greater than expr2           |
| expr1 -ge expr2  | True if expr1 is greater than equal to expr2  |
| expr1 -lt expr2  | True if expr1 is less than expr2              | 
| expr1 -le expr2  | True if expr1 is less than or equal to expr2  |
| !expr1           | Negates the result of the expression          |            
+------------------+-----------------------------------------------+

--------------------------------------------------------------------------------------------------------------------
Multipule conditions:
--------------------------------------------------------------------------------------------------------------------
if you want to check mutiple condictions we can use 
"AND" -> -a -> "&&" operator
"OR" ->  -o -> "||" operator
"NOT" -> -n -> "!"

cond1 && cond2 && cond3
or
cond1 -a cond2 -a cond3 
or
cond 

example:
----------------------
if [ ]
then
 ....
else
 .....
fi
--------------------------------------------------------------------------------------------------------------------
if:
--------------------------------------------------------------------------------------------------------------------
if is a conditional statement, to check the conditon is met then the logic will exicute esle not. we must follow few things writing the if statements. below are the rules.    

1. conditions are writen in [ ]
2. must use space between conditions and braces
	example:
	if [ $A -gt $B ]
3. if we have multiple conditions we can user [[ ]] and 
	example:
	if [[ $A -gt $B && $A -lt $C ]] --> and condition
	if [[ $A -gt $B || $A -lt $C ]] --> or condition 
4. linus file operatios 
	[ -e FILE ]--> if file exists
	[ -d FILE ]--> if file exists and is a directory
	[ -s FILE ]--> If file exists and has size greater than 0
	[ -x FILE ]--> If the file is executable
	[ -w FILE ]--> If the file is writeable

exmaple:1
------------------------------------------
	if [ $rocket_status = "failed" ]
	then
		echo " Rocket debug is exicuting"
	elif [ $rocket_status = "failed" ]
	then
		echo " Rocket launch successful"
	else 
		echo "the status is not failed or success"
	fi
---------------------------------------------
example:2
--------------------------------------------
	if [ -e filename ]
	then
		echo "file exists"
	else
		echo "file not exists"
	fi
---------------------------------------------
example:3
--------------------------------------------
ping $IP
if [ $? -eq 0]; then
echo "command success"
fi

--------------------------------------------------------------------------------------------------------------------
for: 
--------------------------------------------------------------------------------------------------------------------
for is used to check from the range
	
example:1
----------------------------------------
for mission in $(cat mission-names.txt)
do 
	echo " Mission name: $mission"
done
---------------------------------------

example:2
--------------------------------------
for mission in 1 2 3 4 5 6
do
	echo " mission-$mission"
done
---------------------------------------

example:3
-------------------------------------
for mission in {0..100}
do	
	echo "$mission"
done
-------------------------------------

example:4 we can write like below also
-----------------------------------------
for (( mission = 0 ; mission <= 100; mission++ ))
do
	echo "$mission"
done
----------------------------------------

example:5 : real time
-----------------------------
for package in $(cat install-packages.txt)
do
	sudo apt-get –y install $package
done
------------------------------

example:6 : real time
-----------------------------
for server in $(cat servers.txt)
do
	ssh $server "uptime"
done
------------------------------

example:7 : real time
-----------------------------
for file in $(ls)
do
	echo Line count of $file is $(cat $file | wc -l)
done
-----------------------------
#!/bin/bash

list=(1 2 3 4 5)

for i in ${list[@]}
do
	echo $i
done

--------------------------------------------------------------------------------------------------------------------
while:
--------------------------------------------------------------------------------------------------------------------
this loop will end only when the condition is satisfied else it will be an infinity loop

example:
------------------
while [ condition ]
do 
	<< logic ..>>
done
--------------------------------------------------
while true
do
	echo "1. Shutdown"
	echo "2. Restart"
	echo "3. Exit Menu"

	read –p "Enter your choice: " choice

	if [ $choice -eq 1 ]
	then
		shutdown now
	elif [ $choice -eq 2 ]
	then
		shutdown –r now
	elif [ $choice -eq 3 ]
	then
		break
	else
		continue
	fi
done
-----------------------------------------------------

--------------------------------------------------------------------------------------------------------------------
case:
--------------------------------------------------------------------------------------------------------------------
we can use case statement in above script 

example:1
-----------------------------------------------
while true
do 
	echo "1. Shutdown"
	echo "2. Restart"
	echo "3. Exit Menu"

	read -p "Enter your choice: " choice

	case $choice in
		1) shutdown now ;;
		2) shutdown -r now ;;
		3) break ;;
		*) continue ;;
	esac
done
--------------------------------------------

exit code: can be find using "$?"
-----------------------------------
after exicuting every command we will get one exit code value which is used to check the staus of the command

example:
------------------------
$ ls ; echo $?; --> o/p: 0 | this will give the exit code for ls command

example:1
--------------------
$ lsss; echo $? --> o/p: >0 | failed 

--------------------------------------------------------------------------------------------------------------------
functions:
--------------------------------------------------------------------------------------------------------------------
how define a function to remove the duplication of code
	1. function is defined as (ex: function function-name(){ << logic >> })
	2. we can pass arguments in to function as $1 $2 and so on
	3. we can that funcation using funcation name followed by arguments (ex: funcation-name $1 $2 )

syntax:
------------------
function <function-name>(){
...
...
...
}

example:1 
-------------------------
function dir_check() {
    for name in $1
    do 
	if [ -d $2/$name ]
	then
		continue
	else
		echo "directory $name not available"
		mkdir -p $2/$name
		if [ $? -eq 0 ]
		then
			echo "Directory Created"
		else
		echo "Failed to Create Directory"
		fi
	 fi
    done
}

dir_check $tm_dir_list $ndrx_home
dir_check $qdata_dir_list $ndrx_home
-----------------------  

--------------------------------------------------------------------------------------------------------------------
set: is a positional parameters
--------------------------------------------------------------------------------------------------------------------

#!/bin/bash
set `date`
echo "$1"
echo "$2"
echo $3

--------------------------------------------------------------------------------------------------------------------
until:
--------------------------------------------------------------------------------------------------------------------
until loop is used to check till the condition is true. that means it will keep checking the givn condition is true. 

------------------------------
#!/bin/bash
echo -e " Please enter the 'IP' to check the 'Ping' status : "
read -r IP
until ping -c 3 $IP
do 
	echo "$IP is not reachable"
	sleep 5
done
echo "$IP is now reachable"
------------------------------

--------------------------------------------------------------------------------------------------------------------
array: 
--------------------------------------------------------------------------------------------------------------------
an array is a single dimention data. this array will run only bash/korn shell so, while writing the code be aware of it. 

-----------------------------
#!/bin/bash
fruits=(mango orange apple sapota santra)
for fruit in ${fruits[@]}
do 
	echo "fruit name is $fruit"
done
echo "fruits count in array is"${#fruits[@]}
echo "All fruits:" ${fruits[@]}
--------------------------------

--------------------------------------------------------------------------------------------------------------------
getopts
--------------------------------------------------------------------------------------------------------------------

CPU Alerts
--------------------------------------------------------------------------------------------------------------------

#!/bin/bash
HOSTNAME=$(hostname)
CRITIAL=95
WARNING=90


%h --> hours
%d --> date
%y --> year

sh -x script.sh --> for debug
shellcheck.net --> to check and debug the issues


